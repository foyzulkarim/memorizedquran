{"version":3,"sources":["models/surah.js","services/surah.js","models/memorized-info.js","services/memorization.js","components/quran-memorization-table.jsx","App.js","serviceWorker.js","index.js"],"names":["Surah","options","this","serialNo","name","nameAr","totalAyah","surahService","quranData","map","surah","index","title","titleAr","count","MemorizedInfo","memorizedAyah","percent","memorizationService","data","localStorage","setItem","JSON","stringify","memorizationInfoString","getItem","parse","listSurah","surahList","newMemorizationInfo","QuranMemorizationTable","state","memorizationInfo","memorizedTotal","getMemorizationInfo","then","total","reduce","x","y","setState","renderEditable","bind","cellInfo","style","backgroundColor","contentEditable","suppressContentEditableWarning","onBlur","e","n","parseInt","target","innerHTML","saveMemorizationInfo","dangerouslySetInnerHTML","__html","Math","round","columns","Header","id","accessor","Cell","row","width","height","borderRadius","original","transition","showPagination","defaultPageSize","Component","App","className","Jumbotron","fluid","Container","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e09c56ac.chunk.js","sourcesContent":["export default class Surah {\r\n    constructor(options) {\r\n        this.serialNo = options.serialNo;\r\n        this.name = options.name;\r\n        this.nameAr = options.nameAr;\r\n        this.totalAyah = options.totalAyah;\r\n    }\r\n}","import quranData from './../data/quran.json';\r\nimport Surah from './../models/surah';\r\n\r\nclass SurahService {\r\n    async listSurah() {\r\n        return quranData.map((surah, index) => new Surah({\r\n            name: surah.title,\r\n            nameAr: surah.titleAr,\r\n            serialNo: index + 1,\r\n            totalAyah: surah.count\r\n        }));\r\n    }\r\n}\r\n\r\nconst surahService = new SurahService();\r\nexport default surahService;","export default class MemorizedInfo{\r\n    constructor(options){\r\n        this.surah = options.surah;\r\n        this.memorizedAyah = options.memorizedAyah;\r\n        this.percent = 100 * (this.memorizedAyah / this.surah.totalAyah);\r\n    }\r\n}","import surahService from './surah';\r\nimport MemorizedInfo from '../models/memorized-info';\r\n\r\nclass MemorizationService {\r\n    async saveMemorizationInfo(data) {\r\n        localStorage.setItem('memorizedQuran', JSON.stringify(data));\r\n    }\r\n\r\n    async getMemorizationInfo() {\r\n        const memorizationInfoString = localStorage.getItem('memorizedQuran');\r\n\r\n        if (memorizationInfoString) {\r\n            return JSON.parse(memorizationInfoString);\r\n        } else {\r\n            const surahList = await surahService.listSurah();\r\n            const newMemorizationInfo = surahList.map(surah => new MemorizedInfo({\r\n                surah,\r\n                memorizedAyah: 0\r\n            }));\r\n            localStorage.setItem('memorizedQuran', JSON.stringify(newMemorizationInfo));\r\n\r\n            return newMemorizationInfo;\r\n        }\r\n    }\r\n}\r\n\r\nconst memorizationService = new MemorizationService();\r\nexport default memorizationService;","import React, { Component } from \"react\";\r\nimport memorizationService from \"./../services/memorization\";\r\nimport ReactTable from \"react-table\";\r\nimport \"react-table/react-table.css\";\r\n\r\nexport default class QuranMemorizationTable extends Component {\r\n  state = {\r\n    memorizationInfo: [],\r\n    memorizedTotal: 0\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    memorizationService.getMemorizationInfo().then(data => {\r\n      const total = data.reduce((x, y) => x + y.memorizedAyah, 0);\r\n      this.setState({\r\n        memorizationInfo: data,\r\n        memorizedTotal: total\r\n      });\r\n    });\r\n\r\n    this.renderEditable = this.renderEditable.bind(this);\r\n  }\r\n\r\n  renderEditable(cellInfo) {\r\n    return (\r\n      <div\r\n        style={{ backgroundColor: \"#fafafa\" }}\r\n        contentEditable\r\n        suppressContentEditableWarning\r\n        onBlur={e => {\r\n          const data = [...this.state.memorizationInfo];\r\n          const n = parseInt(e.target.innerHTML);\r\n          data[cellInfo.index].memorizedAyah = n;\r\n          data[cellInfo.index].percent =\r\n            100 * (n / data[cellInfo.index].surah.totalAyah);\r\n          const total = data.reduce((x, y) => x + y.memorizedAyah, 0);\r\n          this.setState({\r\n            memorizationInfo: data,\r\n            memorizedTotal: total\r\n          });\r\n\r\n          memorizationService.saveMemorizationInfo(this.state.memorizationInfo);\r\n          //data[cellInfo.index][cellInfo.column.id] = e.target.innerHTML;\r\n          //this.setState({ data });\r\n        }}\r\n        dangerouslySetInnerHTML={{\r\n          __html: this.state.memorizationInfo[cellInfo.index].memorizedAyah\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const percent  = Math.round(100 * (this.state.memorizedTotal / 6236));\r\n    return (\r\n      <div>\r\n        <div>\r\n          <h2>Memorized Total : {this.state.memorizedTotal}</h2>\r\n          <h3>Percent: {percent}%</h3>\r\n        </div>\r\n\r\n        <ReactTable\r\n          data={this.state.memorizationInfo}\r\n          columns={[\r\n            {\r\n              Header: \"Index\",\r\n              id: \"surah.serialNo\",\r\n              accessor: x => x.surah.serialNo\r\n            },\r\n            {\r\n              Header: \"Name\",\r\n              id: \"surah.name\",\r\n              accessor: x => x.surah.name\r\n            },\r\n            {\r\n              Header: \"Total Ayahs\",\r\n              id: \"surah.totalAyah\",\r\n              accessor: x => x.surah.totalAyah\r\n            },\r\n            {\r\n              Header: \"Memorized Ayahs\",\r\n              accessor: \"memorizedAyah\",\r\n              Cell: this.renderEditable\r\n            },\r\n            {\r\n              Header: \"Profile Progress\",\r\n              accessor: \"memorizedAyah\",\r\n              Cell: row => (\r\n                <div\r\n                  style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    backgroundColor: \"#dadada\",\r\n                    borderRadius: \"2px\"\r\n                  }}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      width: `${row.original.percent}%`,\r\n                      height: \"100%\",\r\n                      backgroundColor:\r\n                        row.original.percent > 66\r\n                          ? \"#85cc00\"\r\n                          : row.original.percent > 33\r\n                          ? \"#ffbf00\"\r\n                          : \"#ff2e00\",\r\n                      borderRadius: \"2px\",\r\n                      transition: \"all .2s ease-out\"\r\n                    }}\r\n                  />\r\n                </div>\r\n              )\r\n            }\r\n          ]}\r\n          showPagination={false}\r\n          defaultPageSize={114}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport 'react-table/react-table.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport QuranMemorizationTable from './components/quran-memorization-table';\nimport { Container, Jumbotron } from \"react-bootstrap\";\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <Jumbotron fluid>\n        <Container>\n          <h1>Memorized amount of Quran</h1>\n          <p>\n            This is a very simple calculator of how much of the Quran we memorized.\n          </p>\n          <p>GitHub: <a href=\"https://github.com/foyzulkarim/memorizedquran/tree/develop\" target=\"_blank\">foyzulkarim/memorizedquran</a></p>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <QuranMemorizationTable></QuranMemorizationTable>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}